{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\merta\\\\Desktop\\\\Kodluyoruz_2022 Web Bootcamp\\\\Maths-Quiz-Game\\\\src\\\\hooks\\\\provider.js\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\n\nconst randomNmb = () => Math.floor(Math.random() * 8 + 2);\n\nconst getSqrt = (a, b) => Math.ceil(Math.sqrt(a * b)); // Doğru cevapların şıklar üzerinde yerlerinin random şekilde atanmasını sağlıyor.\n\n\nconst shuffleArray = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n\nconst Provider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [tour, setTour] = useState(0);\n  const [questionsArr, setQuestionsArr] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [currentNumber, setCurrentNumber] = useState(0);\n  const [score, setScore] = useState(0);\n  const [bgColor, setBgColor] = useState('#2d2d2d');\n  const [isClick, setIsClick] = useState(false);\n  const [clickBtnId, setClickBtnId] = useState(null);\n  const [resultQuestions, setResultQuestions] = useState([]);\n  const [trueAnswerCount, setTrueAnswerCount] = useState(0);\n  const [totalResult, setTotalResult] = useState({\n    totalScore: 0,\n    totalQuestions: 0,\n    correctAnswers: 0\n  });\n\n  const setAllQuestion = () => {\n    const newArr = []; // Boş bir dizi tanımlıyoruz\n\n    setCurrentNumber(0); // Aktif numara 0'dan başlayacak\n\n    setResultQuestions([]); // Çözdüğümüz soruların ilk hali boş olacak\n\n    for (let i = 0; i < 10; i++) {\n      // Quizin sorularını tanımlayacak döngümüz\n      const numA = randomNmb();\n      const numB = randomNmb();\n      const scorePoint = getSqrt(numA, numB); // Quiz puanlaması\n\n      const trueAnswer = numA * numB;\n      const answerObj = {\n        // Yanlış cevapların oluşturulması\n        a1: numA * numB,\n        a2: (numA + 1) * numB,\n        a3: numA * (numB - 1)\n      };\n      let answerArr = Object.values(answerObj); // Yanıtları array içerisinde tanımladık\n\n      answerArr = shuffleArray(answerArr); // Arrayin karıştırılmasını sağladık\n\n      newArr.push({\n        //Elde ettiğimiz değerleri arrayimize yolladık\n        numA,\n        numB,\n        scorePoint,\n        trueAnswer,\n        answerArr,\n        result: null\n      });\n    }\n\n    setCurrentQuestion(newArr[currentNumber]); // Yeni soruyu getirdik\n\n    setQuestionsArr(newArr); // Ana arrayimizi oluşturduğumuz arraye atadık\n  };\n\n  const checkAnswer = (answer, btnId) => {\n    // Doğru şıkkı kontrol ediyoruz\n    const isTrue = answer === currentQuestion.trueAnswer;\n    const resultQuestionText = `${currentQuestion.numA} x ${currentQuestion.numB} = ${currentQuestion.trueAnswer}`;\n    setIsClick(true);\n    setClickBtnId(btnId);\n\n    if (isTrue) {\n      // Doğru Şık için background color tanımladık\n      setResultQuestions([...resultQuestions, {\n        resultQuestionText,\n        isAnswerTrue: true\n      }]);\n      setTrueAnswerCount(trueAnswerCount + 1);\n      setBgColor('green');\n    } else {\n      // Yanlış Şık için background color tanımladık\n      setResultQuestions([...resultQuestions, {\n        resultQuestionText,\n        isAnswerTrue: false\n      }]);\n      setBgColor('red');\n    }\n\n    setTimeout(() => {\n      // Aktif soru da cevaplanınca diğer şıkları kapatma ve bekleme süresini tanımladık\n      if (isTrue) {\n        setScore(score + currentQuestion.scorePoint);\n      }\n\n      setBgColor('#2d2d2d');\n      setCurrentNumber(currentNumber + 1);\n      setClickBtnId(null);\n      setIsClick(false);\n    }, 3000);\n  };\n\n  const setTotalResultToStorage = data => {\n    // Tutulan ilerleme değerlerini güncelliyoruz \n    if (data) {\n      setTotalResult(data);\n    } else {\n      setTotalResult(prevState => ({ ...prevState,\n        totalScore: prevState.totalScore + score,\n        totalQuestions: prevState.totalQuestions + questionsArr.length,\n        correctAnswers: prevState.correctAnswers + trueAnswerCount\n      }));\n    }\n  };\n\n  useEffect(() => {\n    // Yeni soruya geçiriyoruz\n    if (questionsArr.length > 0) {\n      setCurrentQuestion(questionsArr[currentNumber]);\n    }\n  }, [currentNumber]);\n  useEffect(() => {\n    // Değerleri Local Storage'e yolluyoruz\n    localStorage.setItem('totalResult', JSON.stringify(totalResult));\n  }, [totalResult]);\n  useEffect(() => {\n    // Değerleri Local Storage'e yolluyoruz\n    localStorage.setItem('tour', JSON.stringify(tour));\n  }, [tour]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      tour,\n      questionsArr,\n      score,\n      currentQuestion,\n      isClick,\n      currentNumber,\n      bgColor,\n      clickBtnId,\n      resultQuestions,\n      trueAnswerCount,\n      totalResult,\n      setTour,\n      checkAnswer,\n      setAllQuestion,\n      setTotalResultToStorage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Provider, \"Nao76rmKmA3CzCWerV+TuY+N1kg=\");\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["useState","createContext","useEffect","Context","randomNmb","Math","floor","random","getSqrt","a","b","ceil","sqrt","shuffleArray","array","i","length","j","Provider","children","tour","setTour","questionsArr","setQuestionsArr","currentQuestion","setCurrentQuestion","currentNumber","setCurrentNumber","score","setScore","bgColor","setBgColor","isClick","setIsClick","clickBtnId","setClickBtnId","resultQuestions","setResultQuestions","trueAnswerCount","setTrueAnswerCount","totalResult","setTotalResult","totalScore","totalQuestions","correctAnswers","setAllQuestion","newArr","numA","numB","scorePoint","trueAnswer","answerObj","a1","a2","a3","answerArr","Object","values","push","result","checkAnswer","answer","btnId","isTrue","resultQuestionText","isAnswerTrue","setTimeout","setTotalResultToStorage","data","prevState","localStorage","setItem","JSON","stringify"],"sources":["C:/Users/merta/Desktop/Kodluyoruz_2022 Web Bootcamp/Maths-Quiz-Game/src/hooks/provider.js"],"sourcesContent":["import { useState, createContext, useEffect } from 'react';\r\n\r\nexport const Context = createContext();\r\n\r\nconst randomNmb = () => Math.floor(Math.random() * 8 + 2);\r\n\r\nconst getSqrt = (a, b) => Math.ceil(Math.sqrt(a * b));\r\n\r\n// Doğru cevapların şıklar üzerinde yerlerinin random şekilde atanmasını sağlıyor.\r\nconst shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n};\r\n\r\nconst Provider = ({ children }) => {\r\n    const [tour, setTour] = useState(0);\r\n    const [questionsArr, setQuestionsArr] = useState([]);\r\n    const [currentQuestion, setCurrentQuestion] = useState({});\r\n    const [currentNumber, setCurrentNumber] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [bgColor, setBgColor] = useState('#2d2d2d');\r\n    const [isClick, setIsClick] = useState(false);\r\n    const [clickBtnId, setClickBtnId] = useState(null);\r\n    const [resultQuestions, setResultQuestions] = useState([]);\r\n    const [trueAnswerCount, setTrueAnswerCount] = useState(0);\r\n    const [totalResult, setTotalResult] = useState({ totalScore: 0, totalQuestions: 0, correctAnswers: 0 });\r\n\r\n    const setAllQuestion = () => {\r\n        const newArr = []; // Boş bir dizi tanımlıyoruz\r\n        setCurrentNumber(0); // Aktif numara 0'dan başlayacak\r\n        setResultQuestions([]); // Çözdüğümüz soruların ilk hali boş olacak\r\n\r\n        for (let i = 0; i < 10; i++) { // Quizin sorularını tanımlayacak döngümüz\r\n            const numA = randomNmb();\r\n            const numB = randomNmb();\r\n            const scorePoint = getSqrt(numA, numB); // Quiz puanlaması\r\n            const trueAnswer = numA * numB;\r\n            const answerObj = { // Yanlış cevapların oluşturulması\r\n                a1: numA * numB,\r\n                a2: (numA + 1) * numB,\r\n                a3: numA * (numB - 1)\r\n            };\r\n            let answerArr = Object.values(answerObj); // Yanıtları array içerisinde tanımladık\r\n            answerArr = shuffleArray(answerArr); // Arrayin karıştırılmasını sağladık\r\n\r\n            newArr.push({ //Elde ettiğimiz değerleri arrayimize yolladık\r\n                numA,\r\n                numB,\r\n                scorePoint,\r\n                trueAnswer,\r\n                answerArr,\r\n                result: null\r\n            });\r\n        }\r\n        setCurrentQuestion(newArr[currentNumber]); // Yeni soruyu getirdik\r\n        setQuestionsArr(newArr); // Ana arrayimizi oluşturduğumuz arraye atadık\r\n    };\r\n\r\n    const checkAnswer = (answer, btnId) => { // Doğru şıkkı kontrol ediyoruz\r\n        const isTrue = answer === currentQuestion.trueAnswer;\r\n        const resultQuestionText = `${currentQuestion.numA} x ${currentQuestion.numB} = ${currentQuestion.trueAnswer}`;\r\n        setIsClick(true);\r\n        setClickBtnId(btnId);\r\n\r\n        if (isTrue) { // Doğru Şık için background color tanımladık\r\n            setResultQuestions([...resultQuestions, {\r\n                resultQuestionText,\r\n                isAnswerTrue: true\r\n            }]);\r\n            setTrueAnswerCount(trueAnswerCount + 1);\r\n            setBgColor('green');\r\n        } else { // Yanlış Şık için background color tanımladık\r\n            setResultQuestions([...resultQuestions, {\r\n                resultQuestionText,\r\n                isAnswerTrue: false\r\n            }]);\r\n            setBgColor('red');\r\n        }\r\n\r\n        setTimeout(() => { // Aktif soru da cevaplanınca diğer şıkları kapatma ve bekleme süresini tanımladık\r\n            if (isTrue) {\r\n                setScore(score + currentQuestion.scorePoint);\r\n            }\r\n            setBgColor('#2d2d2d');\r\n            setCurrentNumber(currentNumber + 1);\r\n            setClickBtnId(null);\r\n            setIsClick(false);\r\n        }, 3000);\r\n    };\r\n\r\n    const setTotalResultToStorage = (data) => { // Tutulan ilerleme değerlerini güncelliyoruz \r\n        if (data) {\r\n            setTotalResult(data);\r\n        } else {\r\n            setTotalResult(prevState => (\r\n                {\r\n                    ...prevState,\r\n                    totalScore: prevState.totalScore + score,\r\n                    totalQuestions: prevState.totalQuestions + questionsArr.length,\r\n                    correctAnswers: prevState.correctAnswers + trueAnswerCount\r\n                }));\r\n        }\r\n    };\r\n\r\n    useEffect(() => { // Yeni soruya geçiriyoruz\r\n        if (questionsArr.length > 0) {\r\n            setCurrentQuestion(questionsArr[currentNumber]);\r\n        }\r\n    }, [currentNumber]);\r\n\r\n    useEffect(() => { // Değerleri Local Storage'e yolluyoruz\r\n        localStorage.setItem('totalResult', JSON.stringify(totalResult));\r\n    }, [totalResult]);\r\n\r\n    useEffect(() => { // Değerleri Local Storage'e yolluyoruz\r\n        localStorage.setItem('tour', JSON.stringify(tour));\r\n    }, [tour]);\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            tour,\r\n            questionsArr,\r\n            score,\r\n            currentQuestion,\r\n            isClick,\r\n            currentNumber,\r\n            bgColor,\r\n            clickBtnId,\r\n            resultQuestions,\r\n            trueAnswerCount,\r\n            totalResult,\r\n            setTour,\r\n            checkAnswer,\r\n            setAllQuestion,\r\n            setTotalResultToStorage\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nexport default Provider;"],"mappings":"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"},"metadata":{},"sourceType":"module"}